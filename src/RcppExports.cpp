// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// kernelMatrix_cpp
Eigen::MatrixXd kernelMatrix_cpp(const Eigen::MatrixXd& X1, const Eigen::MatrixXd& X2, const Rcpp::List& kernel_spec);
RcppExport SEXP _flexKernel_kernelMatrix_cpp(SEXP X1SEXP, SEXP X2SEXP, SEXP kernel_specSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type kernel_spec(kernel_specSEXP);
    rcpp_result_gen = Rcpp::wrap(kernelMatrix_cpp(X1, X2, kernel_spec));
    return rcpp_result_gen;
END_RCPP
}
// computeNystromApproximation_cpp
Rcpp::List computeNystromApproximation_cpp(const Eigen::MatrixXd& X, int num_landmarks, const Rcpp::List& kernel_spec, double regularization, int batch_size, int max_iterations, unsigned int seed);
RcppExport SEXP _flexKernel_computeNystromApproximation_cpp(SEXP XSEXP, SEXP num_landmarksSEXP, SEXP kernel_specSEXP, SEXP regularizationSEXP, SEXP batch_sizeSEXP, SEXP max_iterationsSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type num_landmarks(num_landmarksSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type kernel_spec(kernel_specSEXP);
    Rcpp::traits::input_parameter< double >::type regularization(regularizationSEXP);
    Rcpp::traits::input_parameter< int >::type batch_size(batch_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type max_iterations(max_iterationsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(computeNystromApproximation_cpp(X, num_landmarks, kernel_spec, regularization, batch_size, max_iterations, seed));
    return rcpp_result_gen;
END_RCPP
}
// kernelScalar_cpp
double kernelScalar_cpp(const Eigen::VectorXd& x1, const Eigen::VectorXd& x2, const Rcpp::List& kernel_spec);
RcppExport SEXP _flexKernel_kernelScalar_cpp(SEXP x1SEXP, SEXP x2SEXP, SEXP kernel_specSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type kernel_spec(kernel_specSEXP);
    rcpp_result_gen = Rcpp::wrap(kernelScalar_cpp(x1, x2, kernel_spec));
    return rcpp_result_gen;
END_RCPP
}
// mini_batch_kmeans_rcpp
Rcpp::List mini_batch_kmeans_rcpp(const Rcpp::NumericMatrix& XR, const int k, const int batch_size, const int max_epochs, const int num_threads);
RcppExport SEXP _flexKernel_mini_batch_kmeans_rcpp(SEXP XRSEXP, SEXP kSEXP, SEXP batch_sizeSEXP, SEXP max_epochsSEXP, SEXP num_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type XR(XRSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const int >::type batch_size(batch_sizeSEXP);
    Rcpp::traits::input_parameter< const int >::type max_epochs(max_epochsSEXP);
    Rcpp::traits::input_parameter< const int >::type num_threads(num_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(mini_batch_kmeans_rcpp(XR, k, batch_size, max_epochs, num_threads));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_flexKernel_kernelMatrix_cpp", (DL_FUNC) &_flexKernel_kernelMatrix_cpp, 3},
    {"_flexKernel_computeNystromApproximation_cpp", (DL_FUNC) &_flexKernel_computeNystromApproximation_cpp, 7},
    {"_flexKernel_kernelScalar_cpp", (DL_FUNC) &_flexKernel_kernelScalar_cpp, 3},
    {"_flexKernel_mini_batch_kmeans_rcpp", (DL_FUNC) &_flexKernel_mini_batch_kmeans_rcpp, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_flexKernel(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
