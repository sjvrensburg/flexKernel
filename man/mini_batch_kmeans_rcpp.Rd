% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{mini_batch_kmeans_rcpp}
\alias{mini_batch_kmeans_rcpp}
\title{Mini-Batch K-Means Clustering}
\usage{
mini_batch_kmeans_rcpp(XR, k, batch_size, max_epochs, num_threads = 1L)
}
\arguments{
\item{XR}{The data matrix with observations in rows (standard R format).}

\item{k}{The number of clusters.}

\item{batch_size}{The size of each mini-batch.}

\item{max_epochs}{The number of full passes over the dataset.}

\item{num_threads}{The number of OpenMP threads to use for parallel processing.}
}
\value{
A list with the matrix of cluster centers, a vector of cluster assignments (1-based indices), and a status flag.
}
\description{
Performs mini-batch k-means clustering on a given dataset using the k-means++ initialization method.
This function is a wrapper around a C++ implementation using RcppEigen for efficiency.
}
\details{
This function implements the mini-batch k-means algorithm, which is an approximation of the standard k-means
algorithm designed for large datasets. It processes the data in small random subsets (mini-batches) to update
the cluster centers incrementally, reducing computational cost and memory usage.

The cluster centers are initialized using the k-means++ method, which selects initial centers that are spread out
across the dataset to improve convergence.

The function uses OpenMP for parallel processing within each mini-batch, leveraging multiple CPU cores to speed up
computations.

Random selections, including initialization and mini-batch sampling, are performed using R's random number generator
to ensure reproducibility with \code{set.seed()}.

If any cluster does not receive points during an epoch, it is reinitialized to a random data point to prevent stagnation.
}
\note{
The input matrix \code{XR} should have observations in rows and features in columns (standard R format).
The returned cluster centers have k rows (one per cluster) and the same number of columns as the input data.
}
\examples{
\dontrun{
set.seed(123)
X <- matrix(rnorm(1000 * 10), nrow = 1000)  # 1000 observations, 10 features
result <- mini_batch_kmeans_rcpp(X, k = 3, batch_size = 100, max_epochs = 10, num_threads = 2)
if (result$success) {
print(result$means)  # 3 rows (clusters) Ã— 10 columns (features)
print(table(result$cluster))  # Distribution of observations across clusters
} else {
warning("Mini-batch k-means failed.")
}
}

}
